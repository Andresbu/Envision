/***********************************************************************************************************************
 * Node.cpp
 *
 *  Created on: Nov 3, 2010
 *      Author: Dimitar Asenov
 **********************************************************************************************************************/

#include "Node.h"
#include <QMutexLocker>

namespace Model {

/***********************************************************************************************************************
 * STATIC MEMBERS
 **********************************************************************************************************************/
Node::IdType Node::nextId = 0;
QMutex Node::nextIdAccess;

/***********************************************************************************************************************
 * CONSTRUCTORS AND DESTRUCTORS
 **********************************************************************************************************************/
Node::Node(Node* parent_) :
	parent(parent_)
{
	QMutexLocker locker(&nextIdAccess);

	id = nextId;
	nextId++;
}

Node::Node(Node* parent_, IdType id_) :
	parent(parent_), id(id_)
{
}

Node::~Node()
{
	// TODO Auto-generated destructor stub
}

/***********************************************************************************************************************
 * MAIN METHODS
 **********************************************************************************************************************/

/***********************************************************************************************************************
 * GETTERS AND SETTERS
 **********************************************************************************************************************/
Node::IdType Node::getId()
{
	return id;
}

bool Node::isNewPersistenceUnit()
{
	return false;
}

int Node::getRevision()
{
	return revision;
}

void Node::incrementRevision()
{
	revision++;
}

void Node::addToRevision(int valueToAdd)
{
	revision += valueToAdd;
}

}
